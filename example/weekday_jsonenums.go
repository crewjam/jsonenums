// generated by jsonenums -type=WeekDay; DO NOT EDIT

package main

import (
	"encoding/json"
	"fmt"
)

var (
	_WeekDayNameToValue = map[string]WeekDay{
		"Monday":    Monday,
		"Tuesday":   Tuesday,
		"Wednesday": Wednesday,
		"Thursday":  Thursday,
		"Friday":    Friday,
		"Saturday":  Saturday,
		"Sunday":    Sunday,
	}

	_WeekDayValueToName = map[WeekDay]string{
		Monday:    "Monday",
		Tuesday:   "Tuesday",
		Wednesday: "Wednesday",
		Thursday:  "Thursday",
		Friday:    "Friday",
		Saturday:  "Saturday",
		Sunday:    "Sunday",
	}
)

func ParseWeekDay(s string) (WeekDay, error) {
	v, ok := _WeekDayNameToValue[s]
	if ok {
		return v, nil
	}
	var zeroValue WeekDay
	return zeroValue, fmt.Errorf("invalid WeekDay: %d", s)
}

// String is generated so WeekDay satisfies fmt.Stringer.
func (r WeekDay) String() string {
	s, ok := _WeekDayValueToName[r]
	if ok {
		return s
	}
	return fmt.Sprintf("WeekDay(%d)", r)
}

// MarshalText is generated so WeekDay satisfies encoding.TextMarshaler.
func (r WeekDay) MarshalText() ([]byte, error) {
	s, ok := _WeekDayValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid WeekDay: %d", r)
	}
	return []byte(s), nil
}

// UnmarshalText is generated so WeekDay satisfies encoding.TextUnmarshaler.
func (r *WeekDay) UnmarshalText(data []byte) error {
	v, ok := _WeekDayNameToValue[string(data)]
	if !ok {
		return fmt.Errorf("invalid WeekDay %q", string(data))
	}
	*r = v
	return nil
}

// MarshalJSON is generated so WeekDay satisfies json.Marshaler.
func (r WeekDay) MarshalJSON() ([]byte, error) {
	s, ok := _WeekDayValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid WeekDay: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so WeekDay satisfies json.Unmarshaler.
func (r *WeekDay) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("WeekDay should be a string, got %s", data)
	}
	v, ok := _WeekDayNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid WeekDay %q", s)
	}
	*r = v
	return nil
}

// generated by jsonenums -type=ShirtSize; DO NOT EDIT

package main

import (
	"encoding/json"
	"fmt"
)

var (
	_ShirtSizeNameToValue = map[string]ShirtSize{
		"NA": NA,
		"XS": XS,
		"S":  S,
		"M":  M,
		"L":  L,
		"XL": XL,
	}

	_ShirtSizeValueToName = map[ShirtSize]string{
		NA: "NA",
		XS: "XS",
		S:  "S",
		M:  "M",
		L:  "L",
		XL: "XL",
	}
)

func ParseShirtSize(s string) (ShirtSize, error) {
	v, ok := _ShirtSizeNameToValue[s]
	if ok {
		return v, nil
	}
	var zeroValue ShirtSize
	return zeroValue, fmt.Errorf("invalid ShirtSize: %d", s)
}

// String is generated so ShirtSize satisfies fmt.Stringer.
func (r ShirtSize) String() string {
	s, ok := _ShirtSizeValueToName[r]
	if ok {
		return s
	}
	return fmt.Sprintf("ShirtSize(%d)", r)
}

// MarshalText is generated so ShirtSize satisfies encoding.TextMarshaler.
func (r ShirtSize) MarshalText() ([]byte, error) {
	s, ok := _ShirtSizeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid ShirtSize: %d", r)
	}
	return []byte(s), nil
}

// UnmarshalText is generated so ShirtSize satisfies encoding.TextUnmarshaler.
func (r *ShirtSize) UnmarshalText(data []byte) error {
	v, ok := _ShirtSizeNameToValue[string(data)]
	if !ok {
		return fmt.Errorf("invalid ShirtSize %q", string(data))
	}
	*r = v
	return nil
}

// MarshalJSON is generated so ShirtSize satisfies json.Marshaler.
func (r ShirtSize) MarshalJSON() ([]byte, error) {
	s, ok := _ShirtSizeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid ShirtSize: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so ShirtSize satisfies json.Unmarshaler.
func (r *ShirtSize) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ShirtSize should be a string, got %s", data)
	}
	v, ok := _ShirtSizeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid ShirtSize %q", s)
	}
	*r = v
	return nil
}
